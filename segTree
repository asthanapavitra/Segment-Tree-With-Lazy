class SegTree {
    int[] seg;   // Segment tree array
    int[] lazy;  // Lazy array for deferred updates

    // Constructor to initialize segment tree and lazy arrays
    SegTree(int n) {
        seg = new int[4 * n];
        lazy = new int[4 * n];
    }

    // O(n) - Build the segment tree
    void construct(int arr[], int ss, int se, int ind) {
        if (ss > se) return;
        if (ss == se) {
            seg[ind] = arr[ss];
            return;
        }
        int mid = (ss + se) / 2;
        construct(arr, ss, mid, 2 * ind + 1);
        construct(arr, mid + 1, se, 2 * ind + 2);
        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];
    }

    // O(log n) - Query the sum in range [l, r]
    int getSum(int ss, int se, int ind, int l, int r) {
        // Handle any pending lazy updates
        if (lazy[ind] != 0) {
            seg[ind] += (se - ss + 1) * lazy[ind]; // Apply lazy value
            if (ss != se) { // Propagate laziness to children
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0; // Clear lazy value for current node
        }

        // No overlap
        if (r < ss || se < l) return 0;

        // Complete overlap
        if (l <= ss && se <= r) return seg[ind];

        // Partial overlap
        int mid = (ss + se) / 2;
        return getSum(ss, mid, 2 * ind + 1, l, r) + getSum(mid + 1, se, 2 * ind + 2, l, r);
    }

    // O(log n) - Point update (direct update to a single element)
    void pointUpdate(int ss, int se, int ind, int i, int value) {
        // Handle any pending lazy updates
        if (lazy[ind] != 0) {
            seg[ind] += (se - ss + 1) * lazy[ind]; // Apply lazy value
            if (ss != se) { // Propagate laziness to children
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0; // Clear lazy value for current node
        }

        // Out of bounds
        if (i < ss || se < i) return;

        // Leaf node
        if (ss == se) {
            seg[ind] = value;
            return;
        }

        int mid = (ss + se) / 2;
        pointUpdate(ss, mid, 2 * ind + 1, i, value); // Update left child
        pointUpdate(mid + 1, se, 2 * ind + 2, i, value); // Update right child
        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2]; // Update current node
    }

    // O(log n) - Range update (increment all elements in range [l, r] by inc)
    void rangeUpdate(int ss, int se, int ind, int l, int r, int inc) {
        // Handle any pending lazy updates
        if (lazy[ind] != 0) {
            seg[ind] += (se - ss + 1) * lazy[ind]; // Apply lazy value
            if (ss != se) { // Propagate laziness to children
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0; // Clear lazy value for current node
        }

        // No overlap
        if (r < ss || se < l) return;

        // Complete overlap
        if (l <= ss && se <= r) {
            seg[ind] += (se - ss + 1) * inc; // Apply increment
            if (ss != se) { // Propagate laziness to children
                lazy[2 * ind + 1] += inc;
                lazy[2 * ind + 2] += inc;
            }
            return;
        }

        // Partial overlap
        int mid = (ss + se) / 2;
        rangeUpdate(ss, mid, 2 * ind + 1, l, r, inc); // Update left child
        rangeUpdate(mid + 1, se, 2 * ind + 2, l, r, inc); // Update right child
        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2]; // Update current node
    }
}
